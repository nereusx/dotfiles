#!/bin/cat
-- Operators ---------------------------------------------------------------------------------------------------------------------
Statements are terminated by semicolons, newlines or right braces.  An empty expression-list stands for $0.  String constants are
quoted "Â ", with the usual C escapes recognized within. Expressions take on string or numeric values as appropriate, and are built
using the operators + - * / % ^ (exponentiation), and concatenation (indicated by white space).  The operators ! ++ -- += -= *= /=
%= ^= > >= < <= == != ?: are also available in expressions. Variables may be scalars, array elements (denoted x[i]) or fields. 
Variables are initialized to the null string. Array subscripts may be any string, not necessarily numeric; this allows for a form
of associative memory. Multiple subscripts such as [i,j,k] are permitted; the constituents are concatenated, separated by the
value of SUBSEP. Additional operators are ~ (matches) or !~ (does not match). Regular expressions are as in egrep; see egrep(1).

-- Variables ---------------------------------------------------------------------------------------------------------------------
ARGC = argument count, assignable | ARGV = argument array, assignable; non-null members are taken as filenames.
CONVFMT = conversion format used when converting numbers (default %.6g).
ENVIRON = array of environment variables; subscripts are names | FILENAME = the name of the current input file.
FS = regular expression used to separate fields; also settable by option -Ffs | RS = input record separator (default newline)
NF = number of fields in the current record | NR = ordinal number of the current record | FNR = NR in the current file.
OFMT = output format for numbers (default %.6g) | OFS = output field separator (space) | ORS = output record separator (newline).
RLENGTH = the length of a string matched by match | RSTART = the start position of a string matched by match
SUBSEP = separates multiple subscripts (default 034 (dq))

-- Commands ----------------------------------------------------------------------------------------------------------------------
if( expression ) statement [ else statement ]
for( expression ; expression ; expression ) statement | for( var in array ) statement
while( expression ) statement | do statement while( expression )
{ [ statement ... ] } | break | continue | return [ expression ] | exit [ expression ] 
delete array[ expression ] = delete an array element | delete array = delete all elements of array
function name([p1 [, p2 ...]]) { ...; return x }
BEGIN { ... } / END { ... } = prologue / epilogue of the script.

print [ expression-list ] [ >[>] file/expr ] [ | pipe ]
printf format [ , expression-list ] [ >[>] file/expr ] [ | pipe ]
getline [var] [<file]
command |[&] getline [var]
next = skip remaining patterns on this input line | nextfile = skip rest of this file, open next, start at top
delete array[ expression ] = delete an array element | delete array = delete all elements of array

-- Mathematics -------------------------------------------------------------------------------------------------------------------
atan2(y, x), cos(x), exp(x), log(x), sin(x), sqrt(x), int(x) = as usual.
rand = random number on (0,1) | srand([x]) = sets seed for rand and returns the previous seed.

-- Functions ---------------------------------------------------------------------------------------------------------------------
length([e]) = the length of string e, number of elements of array e or length of $0 if no argument.
substr(s, m [, n]) = the n-character substring of s that begins at position m counted from 1. If no m, use the rest of the string
index(s, t) = the position in s where the string t occurs, or 0 if it does not.
match(s, r) = the position in s where the regex r occurs, or 0 if it does not. The variables RSTART and RLENGTH are set.
split(s, a [, fs]) = splits the string s into array elements a[1], a[2], ..., a[n], and returns n. 
	The separation is done with the regular expression fs or with the field separator FS if fs is not given.
	An empty string as field separator splits the string into one array element per character.
sub(r, t [, s]) = substitutes t for the first occurrence of the regex r in the string s. If s is not given, $0 is used.
gsub(r, t [, s]) = same as sub() except that all occurrences of the regular expression are replaced;
	sub and gsub return the number of replacements.
sprintf(fmt, expr, ...) = the string resulting from formatting expr ... according to the printf(3) format fmt.
system(cmd) = executes cmd and returns its exit status.
tolower(s) = returns a copy of s to lower-case equivalent | toupper(s) = returns a copy of s to upper-case equivalent.
