# -- mode: sh; tab-size: 4; --

# non-interactive
umask 022

# if non-interactive shell, exit
[ -o interactive ] || return

# yash settings
set -o emacs
set -o allexport
set -o extended-glob
set -o brace-expand
set +o noclobber
set -o no-unset
set -o notify-le
set -o le-no-conv-meta
set +o le-predict
set +o err-exit

[ -r ~/.environ ] && . ~/.environ

# keybinds
bindkey --emacs '\^N' beginning-search-forward
bindkey --emacs '\^O' clear-candidates
bindkey --emacs '\^P' beginning-search-backward
bindkey --emacs '\N'   complete-next-column
bindkey --emacs '\P'   complete-prev-column
#
bindkey --emacs '\^[k' forward-delete-line
bindkey --emacs '\^K'  backward-delete-line
bindkey --emacs '\^[d' delete-line
bindkey --emacs '\^[u' undo
bindkey --emacs '\^U'  redo
bindkey --emacs '\^[q' expect-verbatim
#bindkey --emacs '\^[i' em-toggle-overwrite
#bindkey --emacs '\^[m' em-set-mark
#bindkey --emacs '\^[+' em-copy-region
#bindkey --emacs '\^[-' em-kill-region
#bindkey --emacs '\I'   put
bindkey --emacs '\^[l' emacs-downcase-word
# to be... tcsh's famous alt+p
bindkey --emacs '\^[p' emacs-search-backward
bindkey --emacs '\^F'  emacs-search-backward
bindkey --emacs '\^[f' emacs-search-forward

# initialize event handlers
COMMAND_NOT_FOUND_HANDLER=()
PROMPT_COMMAND=()
YASH_AFTER_CD=()

# run commands with redirection of stdout/err to /dev/null
mute() {
	local buf
	[ $# -gt 0 ] && buf="$*" ||	return 1
	$($buf 2>&1 > /dev/null)
	}

# ensure job control works as expected
[ -o monitor ] && trap - TSTP TTIN TTOU

#	PROMPT
if [ -n "${REMOTEHOST-}" ]; then
  _hc='\fy\fo.'     # yellow hostname for SSH remote
else
  _hc='\fg\fo.'     # green hostname for local
fi
if [ "$(id -u)" -eq 0 ]; then
  _uc='\fr\fo.'     # red username for root
  _2c='\fr\fo.'     # red PS2 for root
else
  _uc=$_hc _hc=  # same username color as hostname for non-root user
  _2c=           # PS2 in normal color for non-root user
fi
# The main prompt ($YASH_PS1) contains the username, hostname, working
# directory, last exit status (only if non-zero), and $SHLVL (only if
# non-one).
YASH_PS1=\
$_uc'${LOGNAME}'\
$_hc'@${HOSTNAME%%.*}\fd. '\
'\fb.${${${PWD:/~/\~}##*/}:-$PWD}\fd. '\
'${{?:/0/}:+\\fr.$?\\fd. }\$ '
YASH_PS1R='\fc.${_vcs_info}'
YASH_PS1S='\fo.'
YASH_PS2=$_2c'> '
#YASH_PS2R=
YASH_PS2S=$YASH_PS1S
YASH_PS4='\fm.+ '
YASH_PS4S='\fmo.'
unset _hc _uc _2c

# No escape sequences allowed in the POSIXly-correct mode.
PS1='${LOGNAME}@${HOSTNAME%%.*} '$PS1

# find escape sequence to change terminal window title
case "$TERM" in
  (xterm|xterm[+-]*|gnome|gnome[+-]*|putty|putty[+-]*|cygwin)
    _tsl='\033];' _fsl='\a' ;;
  (*)
    _tsl=$( (tput tsl 0; echo) 2>/dev/null |
    sed -e 's;\\;\\\\;g' -e 's;;\\033;g' -e 's;;\\a;g' -e 's;%;%%;g')
    _fsl=$( (tput fsl  ; echo) 2>/dev/null |
    sed -e 's;\\;\\\\;g' -e 's;;\\033;g' -e 's;;\\a;g' -e 's;%;%%;g') ;;
esac

# if terminal window title can be changed...
if [ "$_tsl" ] && [ "$_fsl" ]; then

	# set terminal window title on each prompt
	_set_term_title() {
	if [ -t 2 ]; then
    	printf "$_tsl"'%s@%s:%s'"$_fsl" "${LOGNAME}" "${HOSTNAME%%.*}" \
	      "${${PWD:/$HOME/\~}/#$HOME\//\~\/}" >&2
	fi 
	}
	PROMPT_COMMAND=("$PROMPT_COMMAND" '_set_term_title')

	# reset window title when changing host or user
	ssh() {
		if [ -t 2 ]; then printf "$_tsl"'ssh %s'"$_fsl" "$*" >&2; fi
		command ssh "$@"
		}
	su() {
		if [ -t 2 ]; then printf "$_tsl"'su %s'"$_fsl" "$*" >&2; fi
		command su "$@"
		}
	sudo() {
		if [ -t 2 ]; then printf "$_tsl"'sudo %s'"$_fsl" "$*" >&2; fi
		command sudo "$@"
		}
fi

# define function that updates $_vcs_info and $_vcs_root
_update_vcs_info() {
  typeset type branch
  {
    read --raw-mode type
    read --raw-mode _vcs_root
    read --raw-mode branch
  } <(
    exec 2>/dev/null
    typeset COMMAND_NOT_FOUND_HANDLER=
    while true; do
      if [ -e .git ] || [ . -ef "${GIT_WORK_TREE-}" ]; then
        printf 'git\n%s\n' "${GIT_WORK_TREE:-$PWD}"
        git branch --no-color | sed -n '/^\*/s/^..//p'
        exit
      elif [ -d .hg ]; then
        printf 'hg\n%s\n' "$PWD"
        exec cat .hg/branch
      elif [ -d .svn ]; then
        printf 'svn\n'
        _vcs_root=$(svn info --show-item=wc-root)
        printf '%s\n' "$_vcs_root"
        path=$(svn info --show-item=relative-url)
        case $path in
          (*/branches/*)
            printf '%s\n' "${${path#*/branches/}%%/*}"
        esac
        exit
      fi
      if [ / -ef . ] || [ . -ef .. ]; then
        exit
      fi
      cd -P ..
    done
  )
  case "$type#$branch" in
    (hg#default) _vcs_info='hg';;
    (git#master) _vcs_info='git';;
    (*#        ) _vcs_info="$type";;
    (*         ) _vcs_info="$type@$branch";;
  esac
}
# update $_vcs_info on each prompt
PROMPT_COMMAND=("$PROMPT_COMMAND" '_update_vcs_info')

# these aliases choose a version controlling program for the current directory
alias _vcs='${${_vcs_info:?not in a version-controlled directory}%%@*}'

# print file type when executing non-executable files
_file_type() {
	if [ -e "$1" ] && ! [ -d "$1" ]; then
		file -- "$1"
	fi
}
COMMAND_NOT_FOUND_HANDLER=("$COMMAND_NOT_FOUND_HANDLER" '_file_type "$@"')

#
#	aliases
#
[ -r ~/.aliases ] && . ~/.aliases
getfilename() {	echo ${1##*/}; }
getdirname()  { local fn; fn=${1##*/}; echo ${1%"$fn"}; }
getbasename() {	local fn; fn=${1##*/}; echo ${fn%.*}; }
getfileext()  { local fn, bn; fn=${1##*/}; bn=${fn%.*}; echo ${fn#"$bn"}; }
alias reload='. ~/.yashrc'

# git
_git_q() {
	local msg
	[ $# -gt 0 ] && msg="$*" ||	msg="quick and dirty fix"
	_vcs add . && git commit -m "$msg" && git push; 
}
alias git-q='_git_q'
alias git-s='_git_q'
alias git-c='_vcs checkout'
alias git-g='_vcs pull'
alias git-p='_vcs pull'
alias git-d='_vcs diff'
alias git-l='_vcs log'

# tmux
function completion/tmux {
	typeset words option desc i IFS=' 	
'
	while read -A words; do
		desc=${words[2,-1]}
		for option in "${words[1,1]%,}"; do
			complete -D "$desc" -- "${option}"
		done
	done <("${WORDS[1]}" list-commands 2>&1)
}

# devtodo
_show_todo() { devtodo --timeout --summary; }
if [ -x /usr/bin/devtodo -o -x /usr/local/bin/devtodo ]; then
	YASH_AFTER_CD=("$YASH_AFTER_CD" '_show_todo')
fi

# welcome screen
if [ -o login ]; then
	[ $TTY =~ tty* ] && /bin/echo -ne '\033='
	echo "Welcome to \e[1m\e[32mYaSH\e[0m $YASH_VERSION command line shell"
	echo
	list=(neofetch screenfetch diogenis fortunes)
	for f in $list; do
		if [ $(command -pv $f) ]; then
			$f;
			break
		fi
	done
	unset f list
fi

#	load local yashrc files
for e in ~/.yashrc-*; do
	[ -f $e ] && . $e
done

# clean up
unset e f list _fsl _tsl
