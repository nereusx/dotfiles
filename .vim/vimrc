" .vimrc
"

if getenv('VIMDIR') == v:null
	let $VIMDIR=$HOME.'/.vim'
endif
if getenv('VIMFILES') == v:null
	let $VIMFILES=$VIMDIR.'/files'
endif
if getenv('BACKUPDIR') == v:null
	let $BACKUPDIR=$VIMFILES
endif

set nocompatible
scriptencoding utf-8
set encoding=utf-8
set noerrorbells
"set mouse=a " Enable mouse for scrolling and resizing
set mouse= " Disable mouse
"set nofoldenable " Disable folding by default
set nodigraph " Disable digraph, better use abbrev
set hidden

" TAB
set tabstop=4
set noexpandtab
"set autoindent		" Auto-indent new lines
set noautoindent
set shiftwidth=4	" Number of auto-indent spaces
set smartindent		" Enable smart-indent
set smarttab		" Enable smart-tabs
set softtabstop=4	" Number of spaces per Tab
set wildmenu
"set wildmode=longest,list " tcsh style
set wildignorecase
"set termguicolors 
set guicursor&
set guicursor=a:block,a:blinkwait700-blinkoff400-blinkon250

" it is not a dummy terminal
set notimeout nottimeout timeoutlen=0 ttimeoutlen=-1
"set notimeout ttimeout ttimeoutlen=50 " fandom

" General
set backspace=indent,eol,start	" Backspace behaviour
set number			" Show line numbers
set wrap			" Wrap lines
set textwidth=80	" Line wrap (number of cols)
set nospell
set spelllang=en,el	" Enable spell-checking

set hlsearch		" Highlight all search results
set smartcase		" Enable smart-case search
set incsearch		" Searches for strings incrementally

set more

set ruler			" Show row and column ruler information
set showmatch
set matchtime=1

" Keep 5 columns next to the cursor when scrolling horizontally.
if !&scrolloff
	set scrolloff=1
endif
if !&sidescrolloff
	set sidescrolloff=5
endif

" When 'wrap' is on, display last line even if it doesnt fit.
set display+=lastline

" backup & undo
if !isdirectory($BACKUPDIR.'/text')
	call mkdir($BACKUPDIR.'/text', 'p', 0700)
endif
set backupskip=/tmp/*,$HOME/tmp/*,$BACKUPDIR/*
set backup
set backupdir=$BACKUPDIR.'/text'

if !isdirectory($BACKUPDIR.'/undo')
	call mkdir($BACKUPDIR.'/undo', 'p', 0700)
endif
set undodir =$BACKUPDIR.'/undo'
set undolevels =1000	" Number of undo levels

" swap files
if !isdirectory($BACKUPDIR.'/swap')
	call mkdir($BACKUPDIR.'/swap', 'p', 0700)
endif
"set noswapfile
set directory   =$BACKUPDIR.'/swap'
set updatecount =100

" other files
set viminfo ='100,n$BACKUPDIR/viminfo

" plugins
syntax on
filetype on
filetype plugin on

set shell=/bin/bash

" -----------------------------------
" extra packages

runtime ftplugin/man.vim
packadd vim-quickui
packadd lightline.vim
packadd vim-polyglot

if has("nvim")
	packadd bclose.vim
endif

" rq: bclose
let g:lf_map_keys = 0
let g:lf_replace_netrw = 1		" open lf when vim open a directory
" open file with 'l' or right-arrow instead of 'e'; otherwise it opens in $EDITOR
let g:lf_command_override = 'lf -command "set hidden"'
packadd lf.vim

"packadd vim-airline
"let g:airline#extensions#obsession#enabled = 1
"packadd taglist

" -----------------------------------
" colors
"let g:cc_schemes = ["cbrief", "turbo", "onedark"]
if has("gui_running")
	" note: invoke gvim with specified size
	"	alias g 'gvim -geom 112x30'
	" or use set lines, set columns in ~/.vimrc
	colorscheme onedark
	if hostname() == "quicksand64"
		set gfn=Iosevka\ Fixed\ Semi-Bold\ Expanded\ 14
	elseif hostname() == "void-t440s"
		set gfn=Iosevka\ Fixed\ Semi-Bold\ 11
	else
		set gfn=Iosevka\ Fixed\ Semi-Bold\ 10
	endif
else
	if has("nvim")
		set gfn="Cousine Bold:h14"
	endif
	colorscheme cbrief
endif

" -----------------------------------

packadd vim-cbrief

" -----------------------------------
" Display who change it:
" :verbose set showmode?
"
set noshowmode
set noshowcmd
set laststatus=2
set lazyredraw
set backspace=indent,eol,start
" -----------------------------------

" Markdown files
au BufRead,BufNewFile *.md setlocal filetype=markdown spell
" Treat all .tex files as latex
au BufRead,BufNewFile *.tex setlocal filetype=tex spell
" LaTeX class files
au BufRead,BufNewFile *.cls setlocal filetype=tex spell
" SQLite-specific file
au BufRead,BufNewFile *.sqlite setlocal filetype=sql
" Treat all .h files as C (not cpp)
au BufRead,BufNewFile *.h setlocal filetype=c
" set spell on text files
au BufRead,BufNewFile *.txt,*.log,*.doc,*.ini,*.conf,*.cnf setlocal filetype=text spell
" quickfix
au FileType qf setlocal nonumber

" enable spell on simple docs
autocmd FileType markdown,text,pandoc,tex setlocal spell spelllang=en,el wrap

" ----------------------------------------------------------------------
" stuff to ignore when tab completing
set wildignore=*.o
set wildignore+=*.obj,*~,*.exe,*.a,*.pdb,*.lib 
set wildignore+=*.so,*.dll,*.swp,*.egg,*.jar,*.class,*.pyc,*.pyo,*.bin,*.dex
set wildignore+=*.zip,*.7z,*.rar,*.gz,*.tar,*.gzip,*.bz2,*.tgz,*.xz
set wildignore+=*DS_Store*,*.ipch,*.gem
set wildignore+=*.png,*.jpg,*.gif,*.bmp,*.tga,*.pcx,*.ppm,*.img,*.iso
set wildignore+=*.so,*.swp,*.zip,*/.Trash/**,*.pdf,*.dmg,*/.rbenv/**
set wildignore+=*/.nx/**,*.app,*.git,.git
set wildignore+=*.wav,*.mp3,*.ogg,*.pcm
set wildignore+=*.mht,*.suo,*.sdf,*.jnlp
set wildignore+=*.chm,*.epub,*.pdf,*.mobi,*.ttf
set wildignore+=*.mp4,*.avi,*.flv,*.mov,*.mkv,*.swf,*.swc
set wildignore+=*.ppt,*.pptx,*.docx,*.xlt,*.xls,*.xlsx,*.odt,*.wps
set wildignore+=*.msi,*.crx,*.deb,*.vfd,*.apk,*.ipa,*.bin,*.msu
set wildignore+=*.gba,*.sfc,*.078,*.nds,*.smd,*.smc
set wildignore+=*.linux2,*.win32,*.darwin,*.freebsd,*.linux,*.android

" load abbrev
let my_abbrev_file=$VIMDIR.'/abbrev.vim'
if filereadable(my_abbrev_file)
	execute 'source '.my_abbrev_file
endif

"inoremap <A-SPACE> <SPACE>
"noremap <A-SPACE> <SPACE>

