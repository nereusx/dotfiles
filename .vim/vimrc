" .vimrc
" 
set nocompatible
scriptencoding utf-8
set encoding=utf-8
set noerrorbells
"set mouse=a " Enable mouse for scrolling and resizing
set nofoldenable " Disable folding by default
set hidden

" TAB
set tabstop=4
set noexpandtab
"set autoindent		" Auto-indent new lines
set noautoindent
set shiftwidth=4	" Number of auto-indent spaces
set smartindent		" Enable smart-indent
set smarttab		" Enable smart-tabs
set softtabstop=4	" Number of spaces per Tab
set wildmenu
"set wildmode=longest,list " tcsh style
set wildignorecase

" it is not a dummy terminal
"set notimeout nottimeout timeoutlen=0 ttimeoutlen=-1
set notimeout ttimeout ttimeoutlen=50 " fandom

" General
set backspace=indent,eol,start	" Backspace behaviour
set number			" Show line numbers
set wrap			" Wrap lines
set textwidth=80	" Line wrap (number of cols)
set nospell
set spelllang=en,el	" Enable spell-checking

set hlsearch		" Highlight all search results
set smartcase		" Enable smart-case search
set incsearch		" Searches for strings incrementally

set more

set ruler			" Show row and column ruler information
set showmatch
set matchtime=1

" Keep 5 columns next to the cursor when scrolling horizontally.
if !&scrolloff
	set scrolloff=1
endif
if !&sidescrolloff
	set sidescrolloff=5
endif

" root of secondary directories
if exists('$BACKUPDIR')
	let g:backuproot = $BACKUPDIR
else
	let g:backuproot = $HOME."/.backup"
endif

" When 'wrap' is on, display last line even if it doesnt fit.
set display+=lastline

" backup & undo
if !isdirectory(g:backuproot."/text")
	call mkdir(g:backuproot."/text", "p", 0700)
endif
set backupskip=/tmp/*,$HOME/tmp/*
set backup
set backupdir=g:backuproot."/text"

if !isdirectory(g:backuproot."/vim-undo")
	call mkdir(g:backuproot."/vim-undo", "p", 0700)
endif
set undodir=g:backuproot."/vim-undo"
set undolevels=1000	" Number of undo levels

" swap files
"if !isdirectory(g:backuproot."/vim-swap")
"	call mkdir(g:backuproot."/vim-swap", "p", 0700)
"endif
"set noswapfile
"set directory   =g:backuproot."/vim-swap"
"set updatecount =100
" other files
"set viminfo     ='100,n$HOME/.vim/files/info/viminfo

" plugins
syntax on
filetype on
filetype plugin on

set shell=/bin/bash

" -----------------------------------
" extra packages

runtime ftplugin/man.vim
packadd vim-quickui
packadd lightline.vim
packadd vim-polyglot

if has("nvim")
	packadd bclose.vim
endif

" rq: bclose
let g:lf_map_keys = 0
let g:lf_replace_netrw = 1		" open lf when vim open a directory
" open file with 'l' or right-arrow instead of 'e'; otherwise it opens in $EDITOR
let g:lf_command_override = 'lf -command "set hidden"'
packadd lf.vim

"packadd vim-airline
"let g:airline#extensions#obsession#enabled = 1
"packadd taglist

"NORMAL MODE
"	gc{motion}   :: Toggle comments
"	gc<Count>c{motion} :: Toggle comment with count argument 
"	gcc          :: Toggle comment for the current line
"	gC{motion}   :: Toggle comments by line
"	g<{motion}   :: Uncomment region
"	g<c          :: Uncomment the current line
"	g<b          :: Uncomment the current region as block
"	g>{motion}   :: Comment region
"	g>c          :: Comment the current line
"	g>b          :: Comment the current region as block
"VISUAL MODE
"	gc           :: Toggle comments
"	g>           :: Comment selected text
"INSERT MODE
"	<c-_><c-_>   :: :TComment
"	<c-_><space> :: :TComment <QUERY COMMENT-BEGIN ?COMMENT-END>
"	<c-_>b       :: :TCommentBlock
"	<c-_>a       :: :TCommentAs <QUERY COMMENT TYPE>
"	<c-_>n       :: :TCommentAs &filetype <QUERY COUNT>
"	<c-_>s       :: :TCommentAs &filetype_<QUERY COMMENT SUBTYPE>
"	<c-_>i       :: :TCommentInline
"	<c-_>r       :: :TCommentRight
"	<c-_>p       :: Comment the current inner paragraph
"	Most of the above maps are also available in visual mode.
packadd tcomment_vim

" You can use the following command to open/edit the scratch buffer: 
"	:Scratch 
" To open the scratch buffer in a new split window, use the following command: 
"	:Sscratch 
packadd scratch
"inoremap <F10> <C-O>:Scratch<CR>
"inoremap <F10> <C-O>:Sscratch<CR>

" -----------------------------------
" colors
"let g:cc_schemes = ["cbrief", "turbo", "onedark"]
if has("gui_running")
	" note: invoke gvim with specified size
	"	alias g 'gvim -geom 112x30'
	" or use set lines, set columns in ~/.vimrc
	colorscheme onedark
	if hostname() == "quicksand64"
		set gfn=Iosevka\ Fixed\ Semi-Bold\ Expanded\ 14
	elseif hostname() == "void-t440s"
		set gfn=Iosevka\ Fixed\ Semi-Bold\ 11
	else
		set gfn=Iosevka\ Fixed\ Semi-Bold\ 10
	endif
else
	if has("nvim")
		set gfn="Cousine Bold:h14"
	endif
	colorscheme cbrief
endif

" -----------------------------------

packadd vim-cbrief

" -----------------------------------
" Display who change it:
" :verbose set showmode?
"
set noshowmode
set noshowcmd
set laststatus=2
set lazyredraw
set backspace=indent,eol,start
" -----------------------------------

" Markdown files
au BufRead,BufNewFile *.md setlocal filetype=markdown spell
" Treat all .tex files as latex
au BufRead,BufNewFile *.tex setlocal filetype=tex spell
" LaTeX class files
au BufRead,BufNewFile *.cls setlocal filetype=tex spell
" SQLite-specific file
au BufRead,BufNewFile *.sqlite setlocal filetype=sql
" Treat all .h files as C (not cpp)
au BufRead,BufNewFile *.h setlocal filetype=c
" set spell on text files
au BufRead,BufNewFile *.txt setlocal filetype=text spell
" quickfix
au FileType qf setlocal nonumber

" enable spell on simple docs
autocmd FileType markdown,text,pandoc,tex setlocal spell spelllang=en,el wrap

" fix lost highlight bug!
autocmd BufEnter * :syntax sync fromstart

"set digraph
"digraph kk 983 " greek ampersand

" add to c
"abb #i #include

" reformat help
"augroup help
"	autocmd!
"	autocmd Filetype help
"		\ set modifiable noreadonly textwidth=120
"		\| normal! gqG
"augroup end
						
" ----------------------------------------------------------------------
" stuff to ignore when tab completing
set wildignore=*.o
set wildignore+=*.obj,*~,*.exe,*.a,*.pdb,*.lib 
set wildignore+=*.so,*.dll,*.swp,*.egg,*.jar,*.class,*.pyc,*.pyo,*.bin,*.dex
set wildignore+=*.zip,*.7z,*.rar,*.gz,*.tar,*.gzip,*.bz2,*.tgz,*.xz
set wildignore+=*DS_Store*,*.ipch,*.gem
set wildignore+=*.png,*.jpg,*.gif,*.bmp,*.tga,*.pcx,*.ppm,*.img,*.iso
set wildignore+=*.so,*.swp,*.zip,*/.Trash/**,*.pdf,*.dmg,*/.rbenv/**
set wildignore+=*/.nx/**,*.app,*.git,.git
set wildignore+=*.wav,*.mp3,*.ogg,*.pcm
set wildignore+=*.mht,*.suo,*.sdf,*.jnlp
set wildignore+=*.chm,*.epub,*.pdf,*.mobi,*.ttf
set wildignore+=*.mp4,*.avi,*.flv,*.mov,*.mkv,*.swf,*.swc
set wildignore+=*.ppt,*.pptx,*.docx,*.xlt,*.xls,*.xlsx,*.odt,*.wps
set wildignore+=*.msi,*.crx,*.deb,*.vfd,*.apk,*.ipa,*.bin,*.msu
set wildignore+=*.gba,*.sfc,*.078,*.nds,*.smd,*.smc
set wildignore+=*.linux2,*.win32,*.darwin,*.freebsd,*.linux,*.android

" === Define Commands
" Command Interface: 
" com! -bar -nargs=0 SWP	call F()
" com! -bar -nargs=? RWP	call F(<args>)
" com! -bar -nargs=1 SM		call F(<q-args>)
" 
" Start nnn in the current file's directory
"inoremap <C-E> <C-O>:NnnPicker %:p:h<CR>

" redraw
"nnoremap <C-L> :nohl<CR><C-L>
"inoremap <C-L> <C-O>:nohl<CR><C-L>

iabbrev __mail nereus@freemail.gr
iabbrev __http https://nicholas-christopoulos.dev
iabbrev __kai  ϰ
iabbrev __lp   ⟨
iabbrev __rp   ⟩
iabbrev __ldp  ⟪
iabbrev __rdp  ⟫
iabbrev __ldq  “
iabbrev __rdq  ”
iabbrev __lsq  ‘
iabbrev __rsq  ’
iabbrev __dag  †
iabbrev __ddag ‡
iabbrev __ss   §
iabbrev __laq  ‹
iabbrev __raq  ›
iabbrev __2    ²
iabbrev __3    ³
iabbrev __deg  °
iabbrev __OU   Ȣ
iabbrev __ou   ȣ
iabbrev __enter ⏎
iabbrev __00   ‰
iabbrev __sq   √
iabbrev __inf  ∞
iabbrev __aprox ≈
iabbrev __kk   ☭
iabbrev __star ★
iabbrev __space ␣

