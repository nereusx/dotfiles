" .vimrc

" disable netrw
let g:loaded_netrw = 1
let g:loaded_netrwPlugin = 1.3

" === globals
let $VIMDIR=$HOME.'/.vim'
if getenv('BACKUPDIR') == v:null
	let $VIMFILES=$VIMDIR.'/files'
else
	let $VIMFILES=$BACKUPDIR
endif
let $TMPL=$VIMDIR.'/tmpl'

" === create directories
let dirs=['/text', '/swap', '/undo', '/sessions']
for d in dirs
	if !isdirectory($VIMFILES.d)
		call mkdir($VIMFILES.d, 'p', 0700)
	endif
endfor
if !isdirectory($TMPL)
	call mkdir($TMPL, 'p', 0700)
endif

" === settings
set nocompatible
scriptencoding utf-8
set encoding=utf-8
set noerrorbells
"set mouse=a " Enable mouse for scrolling and resizing
set mouse= " Disable mouse
set nodigraph " Disable digraph, better use abbrev
set hidden

" TAB
set tabstop=4
set noexpandtab
set noautoindent
set nosmartindent
set nocindent
set shiftwidth=4	" Number of auto-indent spaces
set smarttab		" Enable smart-tabs
set softtabstop=4	" Number of spaces per Tab
set wildmenu
set wildmode=longest,list " tcsh style
set wildignorecase
"set termguicolors 
set guicursor&
set guicursor=a:block,a:blinkwait700-blinkoff400-blinkon250

" it is not a dummy terminal
set notimeout nottimeout timeoutlen=0 ttimeoutlen=-1
"set notimeout ttimeout ttimeoutlen=50 " fandom

" General
set backspace=indent,eol,start	" Backspace behaviour
set number			" Show line numbers
set wrap			" Wrap lines
set textwidth=80	" Line wrap (number of cols)
set nospell
set spelllang=en,el	" Enable spell-checking
set shell=/bin/bash

set hlsearch		" Highlight all search results
set smartcase		" Enable smart-case search
set incsearch		" Searches for strings incrementally

set more

set ruler			" Show row and column ruler information
set showmatch
set matchtime=1

" Keep 5 columns next to the cursor when scrolling horizontally.
if !&scrolloff
	set scrolloff=1
endif
if !&sidescrolloff
	set sidescrolloff=5
endif

" When 'wrap' is on, display last line even if it doesnt fit.
set display+=lastline

" backup & undo
set backupskip=/tmp/*,$HOME/tmp/*,$VIMFILES/*
set backup
set backupdir=$VIMFILES/text
set undodir=$VIMFILES/undo
set undolevels=1000	" Number of undo levels

" swap files
set noswapfile
"set directory=$VIMFILES/swap
"set updatecount=100

" other files
set viminfo='100,n$VIMFILES/viminfo

" plugins
filetype on
filetype indent off
filetype plugin on
syntax on

" highlight white-spaces (color = SpecialKey)
set listchars=tab:»·,trail:·
au OptionSet number :if v:option_new | set showbreak= |
                   \ else | set showbreak=↪ |
                   \ endif
set list
"set nolist

" disable keys
imap <MiddleMouse> <Nop>

" -----------------------------------
" extra packages

runtime ftplugin/man.vim
packadd vim-quickui
packadd lightline.vim
packadd vim-polyglot

" SoftPencil (or PencilSoft) - initialize pencil with soft line wrap mode
" HardPencil (or PencilHard) - initialize pencil with hard line break mode (and Vim’s autoformat)
"packadd vim-markdown
"packadd vim-pencil

nmap <unique> <A-H> <plug>HelpWord
cmap <unique> <A-H> <c-\><c-n><plug>HelpWord
packadd vim-help

if has("nvim")
	packadd bclose.vim
endif

" === snip
if !has("nvim")
	let g:snap_dir = $VIMDIR.'/snap'
	let g:snap_prefix = '_'
	packadd snap.vim
endif

" === LF
"" rq: bclose
packadd vim-floaterm
"let g:lf_map_keys = 0
let g:lf_replace_netrw = 1		" open lf when vim open a directory
"" open file with 'l' or right-arrow instead of 'e'; otherwise it opens in $EDITOR
"let g:lf_command_override = 'lf -command "set hidden"'
packadd lf.vim
"inoremap <silent> <F12>e <C-O>:Lf<CR>

" === NNN
"let g:nnn#replace_netrw = 1
"let g:nnn#set_default_mappings = 0
"let g:nnn#layout = { 'window': { 'width': 0.8, 'height': 0.8, 'highlight': 'Debug' } }
"packadd nnn.vim
"command! -bar -nargs=? -complete=dir NP call nnn#pick(<f-args>)
"command! -bar -nargs=? -complete=dir NNN call nnn#pick(<f-args>)
"inoremap <silent> <C-A-E> <C-O>:call nnn#pick()<CR>

" === AirLine
"packadd vim-airline
"let g:airline#extensions#obsession#enabled = 1
"packadd taglist

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
        \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("."), l:modeline)
endfunction
command Modeline :call AppendModeline()
"inoremap <silent> <F12>m <C-O>:Modeline<CR>

" -----------------------------------
" colors
"let g:cc_schemes = ["cbrief", "turbo", "onedark"]
if has("gui_running")
	" note: invoke gvim with specified size
	"	alias g 'gvim -geom 112x30'
	" or use set lines, set columns in ~/.vimrc
	colorscheme onedark
	if hostname() == "quicksand64"
"		set gfn=Iosevka\ Fixed\ Medium\ 14
		set gfn=D2Coding\ Bold\ 14
	elseif hostname() == "void-t440s"
		set gfn=Iosevka\ Fixed\ Semi-Bold\ 11
	else
		set gfn=Iosevka\ Fixed\ Semi-Bold\ 10
	endif
else
	if has("nvim")
		set gfn="Cousine Bold:h14"
	endif
	if ( system("pgrep -x -u $USER alacritty") )
		colorscheme desert
	else
		colorscheme cbrief
	endif
endif

" --- CBRIEF ------------------------
packadd vim-cbrief
" UMENU
call umenu#additem("&l	LF", "Lf")
call umenu#additem("&m	append modeline", "call AppendModeline()")
" Ctrl+/
inoremap <silent> <C-_> <C-O>:call umenu#show()<CR>
nnoremap <silent> <C-_> <C-O>:call umenu#show()<CR>
"vnoremap <silent> <C-_> :call umenu#show()<CR>

" -----------------------------------
" Display who change it:
" :verbose set showmode?
"
set noshowmode
set noshowcmd
set laststatus=2
set lazyredraw
set backspace=indent,eol,start
set noautoindent
set nosmartindent
set cindent
set cinkeys-=0}

" -----------------------------------

" Markdown files
au BufRead,BufNewFile *.md setlocal filetype=markdown spell
" Treat all .tex files as latex
au BufRead,BufNewFile *.tex setlocal filetype=tex spell
" LaTeX class files
au BufRead,BufNewFile *.cls setlocal filetype=tex spell
" SQLite-specific file
au BufRead,BufNewFile *.sqlite setlocal filetype=sql
" Treat all .h files as C (not cpp)
au BufRead,BufNewFile *.h setlocal filetype=c
" set spell on text files
au BufRead,BufNewFile *.txt,*.log,*.doc,*.ini,*.conf,*.cnf setlocal filetype=text spell

autocmd FileType markdown,text,pandoc,tex,nroff setlocal spell spelllang=en,el wrap

" help and explorer in normal mode
autocmd FileType help,netrw,dirvish :let w:noins=1 | setlocal noinsertmode

" all
autocmd BufRead,BufNewFile * setlocal noautoindent nosmartindent cindent cinkeys-=-0}

" remember insert mode per window
autocmd WinEnter *	if exists('w:noins') |
						\ if w:noins | setlocal noinsertmode | else | setlocal insertmode | endif |
					\ else |
						\ setlocal insertmode |
					\ endif
autocmd WinLeave *	if &insertmode | let w:noins=0 | else | let w:noins=1 | endif

" ----------------------------------------------------------------------
" stuff to ignore when tab completing
set wildignore=*.o
set wildignore+=*.obj,*~,*.exe,*.a,*.pdb,*.lib 
set wildignore+=*.so,*.dll,*.swp,*.egg,*.jar,*.class,*.pyc,*.pyo,*.bin,*.dex
set wildignore+=*.zip,*.7z,*.rar,*.gz,*.tar,*.gzip,*.bz2,*.tgz,*.xz
set wildignore+=*DS_Store*,*.ipch,*.gem
set wildignore+=*.png,*.jpg,*.gif,*.bmp,*.tga,*.pcx,*.ppm,*.img,*.iso
set wildignore+=*.so,*.swp,*.zip,*/.Trash/**,*.pdf,*.dmg,*/.rbenv/**
set wildignore+=*/.nx/**,*.app,*.git,.git
set wildignore+=*.wav,*.mp3,*.ogg,*.pcm
set wildignore+=*.mht,*.suo,*.sdf,*.jnlp
set wildignore+=*.chm,*.epub,*.pdf,*.mobi,*.ttf
set wildignore+=*.mp4,*.avi,*.flv,*.mov,*.mkv,*.swf,*.swc
set wildignore+=*.ppt,*.pptx,*.docx,*.xlt,*.xls,*.xlsx,*.odt,*.wps
set wildignore+=*.msi,*.crx,*.deb,*.vfd,*.apk,*.ipa,*.bin,*.msu
set wildignore+=*.gba,*.sfc,*.078,*.nds,*.smd,*.smc
set wildignore+=*.linux2,*.win32,*.darwin,*.freebsd,*.linux,*.android

" load abbrev
let my_abbrev_file=$VIMDIR.'/abbrev.vim'
if filereadable(my_abbrev_file)
	execute 'source '.my_abbrev_file
endif

"inoremap <A-SPACE> <SPACE>
"noremap <A-SPACE> <SPACE>
inoremap <silent> <A-E> <C-O>:Lf<CR>

