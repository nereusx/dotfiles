#!/bin/sh
#
#	Copyright (C) 2019, Nicholas Christopoulos <nereus@freemail.gr>
#
#	This program is free software; you can redistribute it and/or modify it
#	under the terms of the GNU General Public License as published by the Free
#	Software Foundation; either version 3 of the License, or (at your option)
#	any later version.
#

msghelp="\
System maintenance for Void Linux\n\
"

msgvers="\
void-linux-utils version $(void-utils-version)\n\n\
Copyright (C) 2019 Nicholas Christopoulos <mailto:nereus@freemail.gr>.\n\
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\n\
This is free software: you are free to change and redistribute it.\n\
There is NO WARRANTY, to the extent permitted by law."

###
title="\033[1;32m"
grex="\033[1;32m"
errx="\033[1;31m"
rst="\033[0m"
iptest=1.1.1.1

for o in $*; do
	if [ $o = "-h" -o $o = "--help" ]; then echo $msghelp; exit 1; fi
	if [ $o = "-v" -o $o = "--version" ]; then echo $msgvers; exit 1; fi
done

###
cnt=0
echo "${title}VOID LINUX, SYSTEM MAINTENANCE${rst}"
echo 

echo -n "Network: "
online=0
if ping -w 1 -c 1 $iptest 2>&1 > /dev/null; then
	online=1
	echo "${grex}online${rst}"
else
	echo "${errx}offline${rst}"
fi
echo

# ldconfig
cnt=$((cnt+1))
echo "${title}${cnt}. ldconfig${rst}"
ldconfig

# update system
if [ $online -eq 1 ]; then
	cnt=$((cnt+1))
	echo "${title}${cnt}. Synchronize package repos${rst}"
	xbps-install -S
	
	cnt=$((cnt+1))
	echo "${title}${cnt}. Update xbps${rst}"
	xbps-install -uy xbps

	cnt=$((cnt+1))
	echo "${title}${cnt}. Upgrade packages${rst}"
	xbps-install -uy

	if [ -e /usr/bin/xlocate ]; then
		cnt=$((cnt+1))
		echo "${title}${cnt}. Update xlocate database${rst}"
		xlocate -S
	fi
fi

# remove old packages
cnt=$((cnt+1))
echo "${title}${cnt}. Remove obsolete packages${rst}"
xbps-remove -Oo -y

# remove old kernels
cnt=$((cnt+1))
echo "${title}${cnt}. Remove old kernels${rst}"
vkpurge rm all

# latex
if [ $online -eq 1 ]; then
	if [ -e /usr/bin/which ]; then
		if which tlmgr 2>&1 > /dev/null; then
			cnt=$((cnt+1))
			echo "${title}${cnt}. Texlive subsystem${rst}"
			tlmgr update -self
			tlmgr update -all
		fi
	fi
fi

# man
if [ -e /usr/bin/makewhatis ]; then
	cnt=$((cnt+1))
	echo "${title}${cnt}. Update MAN's db${rst}"
	makewhatis -a -Tutf8
fi

# date
if [ $online -eq 1 ]; then
	if [ -e /usr/bin/ntpdate ]; then
		cnt=$((cnt+1))
		echo "${title}${cnt}. Update clock${rst}"
		server=3.gr.pool.ntp.org
		ntpdate -s $server
	fi
fi
hwclock --systohc

# custom scripts
cnt=$((cnt+1))
echo "${title}${cnt}. Custom scripts (/etc/void-maint.d/)${rst}"
if [ -d /etc/void-maint.d ]; then
	for f in /etc/void-maint.d/*; do
		if [ -x $f ]; then
			cnt=$((cnt+1))
			echo "${title}${cnt}. %f${rst}"
			$f
		fi	
	done
fi

# fonts-cache
if [ -e /usr/bin/fc-cache ]; then
	cnt=$((cnt+1))
	echo "${title}${cnt}. Font-cache${rst}"
	fc-cache -r
fi

# locate
if [ -e /usr/bin/updatedb ]; then
	cnt=$((cnt+1))
	echo "${title}${cnt}. Update locate's db${rst}"
	updatedb
fi

## SSD trim
#if [ -e /usr/bin/fstrim ]; then
#	cnt=$((cnt+1))
#	echo "${title}${cnt}. FS-trim SSD${rst}"
#	fstrim -v -a
#	sync
#fi

#
cnt=$((cnt+1))
echo "${title}${cnt}. Check for new configs${rst}"
for f in /etc/*.new*; do
	echo $f
done

# done
echo "${title}* done *${rst}"
