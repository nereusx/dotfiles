# -- mode: tcsh; tab-width: 4; indent-tabs-mode: t; indent-style: tab; encoding: utf-8; --
#
#	~/.tcshrc
#	Nicholas Christopoulos <mailto:nereus@freemail.gr>

# (non-)interactive absolute values
set parseoctal
set echo_style=both
set backslash_quote

# mode   umask
# 0777 - 0000 - extremly dangerous
# 0775 - 0002 - dangerous
# 0770 - 0007 - not so dangerous
# 0755 - 0022 - default
# 0750 - 0027 - logical
# 0700 - 0077 - nice
# 0000 - 0777 - paranoid
umask 022

##limit stacksize 256k
## slackpkg (bash script) needs > 256k !!!
## sbpkg (bash script) needs even more...
#limit stacksize 4096k
limit coredumpsize 0
alias termbin 'nc termbin.com 9999'

# if its a shell script, exit
if ( ! $?prompt ) exit

#
#	INTERACTIVE MODE
#

#
#	BASIC SYSTEM VARIABLES (for any environment)
#
set DOLR=\$
set EXCL="\041"

if ( ! $?USERID )   setenv USERID   `id -u`
if ( ! $?USER )     setenv USER     `id -un`
if ( ! $?HOME ) then
	if ( $USERID == 0 ) then
		setenv HOME "/root"
	else
		setenv HOME "/home/$USER"
	endif
endif
if ( ! $?HOSTNAME ) then
	setenv HOSTNAME `hostname`
endif
if ( ! $?XDG_RUNTIME_DIR ) setenv XDG_RUNTIME_DIR "/tmp/runtime-$USER"

# find distro
if ( ! $?DISTRO ) then
	if ( -r /etc/os-release ) then
		if ( -e /etc/mx-version ) then
			setenv DISTRO "mx"
		else
			setenv DISTRO `awk '/^ID=/{gsub(/"/,"",$0);print tolower(substr($0,4))}' /etc/os-release`
		endif
		if ( ! $?OSTYPE ) setenv OSTYPE `uname -s`
	else # ignore it
		setenv DISTRO `uname -s`
		if ( ! $?OSTYPE ) setenv OSTYPE unix
	endif
endif

#
#	setup several local directories
#
setenv backup $home/.backup
# setup several local directories
set list = ( $backup $backup/text $backup/saves $home/.bin $home/.help $home/.misc )
foreach e ( $list )
	if ( ! -e $e ) then
		mkdir -p $e
		chmod 0700 $e
	endif
end

#
#	setup and cleanup path
#

# you can get 'path++' at https://github.com/nereusx/unix-utils
if ( -X 'path++' ) then
	set npath = ( $home/.bin $home/.help /bin /usr/bin /usr/local/bin /usr/pkg/bin $path )
	if ( $USERID == 0 ) then
		set npath = ( /sbin /usr/sbin /usr/local/sbin /usr/pkg/sbin $npath )
	endif
	if ( -x /usr/games/fortune ) then
		set npath = ( $npath /usr/games )
	endif
	setenv PATH `path++ $npath`
	
	set mpath = ( /usr/share/man /usr/local/share/man /usr/man /usr/local/man /usr/pkg/man )
	setenv MANPATH `path++ -e MANPATH $mpath`
endif

#
#	SETUP TCSH's ENVIRONMENT
#
set autorehash
set autolist
set highlight
unset autologout
set mail = ( /var/mail/$user )
unset noglob
unalias beepcmd
if ( -e ~/.sounds/beep.wav )\
	alias beepcmd "play -q -v 0.1 ${HOME}/.sounds/beep.wav"
set padhour
alias helpcommand 'man \!:1'
# Runs every tperiod minutes.
# This provides a convenient means for checking on common but infrequent changes such as new mail.
# For example, if one does
#set tperiod = 30
#alias periodic checknews
unalias periodic

if ( $?TMUX ) then
	alias usable-lines 'set _=`tput lines`; @ _ -= 3 ; echo $_'
else
	alias usable-lines 'set _=`tput lines`; @ _ -= 2 ; echo $_'
endif

# select program to use for ncurses menus
set list = ( fzy pick )
setenv PICKER none
foreach e ( $list )
	if ( -X $e ) then
		setenv PICKER $e
		break
	endif
end

# change dir menu (binds to ctrl+/)
if ( -X lf ) then
	setenv LF_HOME "${HOME}/.config/lf"
	[ -e "${LF_HOME}/lfcd.csh" ] && source "${LF_HOME}/lfcd.csh"
	[ -e "${LF_HOME}/lf-complete.csh" ] && source "${LF_HOME}/lf-complete.csh"
	bindkey -c '' lfcd
endif

if ( -X wcd.exe || -X wcd.exec ) then
	setenv WCDHOME "${HOME}/.wcd"
	if ( -X wcd.exec ) then
		alias wcd 'wcd.exec -Tc -K -g -j ; source $WCDHOME/bin/wcd.go'
	else
		alias wcd 'wcd.exe -Tc -K -g -j ; source $WCDHOME/bin/wcd.go'
	endif
#	bindkey -c '' wcd
else if ( -X wcd ) then
	setenv WCDHOME "${HOME}/.wcd"
#	bindkey -c '' wcd
endif

if ( -X fff ) then
	alias fffcd 'setenv FFF_CD_ON_EXIT 1; setenv FFF_CD_FILE ${HOME}/.cache/fff_dir; fff && cd "`cat ${HOME}/.cache/fff_dir`"'
#	bindkey -c '' fffcd
endif

if ( -X noice ) then
	# enable colors
	alias noice 'noice -c'
endif

#
#	tcsh's prompt
#	man console_codes
#
unset ampm
set ellipsis
# color codes: 30+ 1=red 2=green 3=yellow 4=blue 5=magenta 6=cyan 7=white
set _ps=(clock user host dir reset r-status r-hist r-shlvl)
set _ps[1]='%{\033[1;35m%}'
set _ps[2]='%{\033[1;33m%}'
set _ps[3]='%{\033[1;32m%}'
set _ps[4]='%{\033[1;34m%}'
set _ps[5]='%{\033[0m%}'
if ( $USERID == 0 ) then
	set _ps[2]='%{\033[1;31m%}'
	set _ps[4]='%{\033[1;35m%}'
endif
if ( $?REMOTEHOST ) then
	set _ps[3]='%{\033[33m%}'
endif
set prompt  = "${_ps[1]}%T ${_ps[2]}%n${_ps[3]}@%m ${_ps[4]}%c04${_ps[5]} %# "

set _ps[6]='%{\033[0;35m%}' # 1
set _ps[7]='%{\033[0;35m%}' # 6
set _ps[8]='%{\033[0;35m%}'
#set rprompt = " ?${_ps[6]}%?${_ps[5]} ${EXCL}${_ps[7]}%h${_ps[5]} ${DOLR}${_ps[8]}$shlvl${_ps[5]} "
set rprompt = " ${_ps[8]}[?${_ps[6]}%?${_ps[5]} ${_ps[8]}${EXCL}${_ps[7]}%h${_ps[8]}]${_ps[5]} "

#
#	tcsh' history
#
if ( -d ~/.cache ) then
	set histfile = ~/.cache/tcsh.history
else
	set histfile = ~/.tcsh_history
endif
set histlit
set history=2048
#set histdup=all	# mess previous
set histdup=prev
set savehist
set nohistclop
alias hist 'set _=`usable-lines`; history $_'
history -L

# history menu (binds to page-up)
switch ( $PICKER )
case fzy:
	alias hc 'set _=`history -hr | fzy` && if ( "$_" != "hc" ) eval "$_"'
	bindkey -c '[5~' hc
	breaksw
case pick:
	alias hc 'set _=`history -h | pick -S` && if ( "$_" != "hc" ) eval "$_"'
	bindkey -c '[5~' hc
	breaksw
default:
	bindkey -c '[5~' hist
endsw

#
#	tcsh's directory stuff
#
#	Note: use 'dirs' to show the history of directories;
#	use 'cd =N' where N the number of the directory as shown by 'dirs'.
#
if ( -d ~/.cache ) then
	set dirsfile = ~/.cache/tcsh.dirs
else
	set dirsfile = ~/.tcsh_dirs
endif
unset dunique # unfortunately this removes the directory if exists in dirstack
unset dextract
#set cdpath = ( ${HOME} /usr/src )
unset cdpath
set pushdsilent
set pushdtohome
#set savedirs # buggy
unalias cd dirs cwdcmd
alias cd   'pushd'
alias dirs 'dirs -v'
alias _cwd  'echo "\033[32mCWD: \033[1;32m`pwd`\033[0m"'
if ( -X devtodo ) then
	alias cwdcmd '_cwd; devtodo --timeout --summary'
else
	alias cwdcmd '_cwd'
endif
alias save-last-cmd 'history -hr | head -n 2 | tail -n 1 >> ~/.scrap'
# go command
alias gg--	'set _=`dirs | $PICKER | cut -f1` && cd =$_'
alias gg++	'set _=`ls -d1 */ --color=never | $PICKER` && cd "$_"'
alias gg	'set _=\!*; [ -z "$_" -o "$_" = "++" ] && gg++ || [ "$_" = "-" ] && cd - || [ "$_" = "--" ] && gg-- || pushd "$_"'
if ( $PICKER != "none" ) then
	# change dir with lf (binds to ctrl+/)
	if ( ! -X lf ) then
		bindkey -c '' gg++
	endif
	# change dir from history; menu (binds to page-down)
	bindkey -c '[6~' gg--
endif

#
#	tcsh's completion
#
#	complete [command [word/pattern/list[:select]/[[suffix]/] ...]] (+)
set hosts = `cat /etc/hosts | awk '/^[1-9]+/ {if (substr($2,1,5) != "local") print $2}'`
set hosts = ( $hosts github.com sourceforge.net freemail.gr yandex.com yandex.ru duckduckgo.com )

if ( -e /etc/complete.tcsh ) then
	source /etc/complete.tcsh
else
	echo "Warning: '/etc/complete.tcsh' does not exists. To install it, run the following lines"
	echo "sudo wget 'https://raw.githubusercontent.com/tcsh-org/tcsh/master/complete.tcsh' -O /etc/complete.tcsh"
	echo "sudo chmod 0644 /etc/complete.tcsh"
endif
uncomplete ln
uncomplete rm
uncomplete cp
uncomplete mv
uncomplete mount
complete set		'p/1/s/'
complete unset		'p/1/s/'
complete setenv		'p/1/e/'
complete unsetenv	'p/1/e/'
complete env		'c/*=/f/' 'p/1/e/=/' 'p/2/c/'
complete xdvi		'n/*/f:*.dvi/'
complete latex		'n/*/f:*.{tex,ltx}/'
complete pdflatex	'n/*/f:*.{tex,ltx}/'
complete xelatex	'n/*/f:*.{tex,ltx}/'
complete adb		'n/push/f:*.{apk}/'
complete kill		'c/-/S/' 'c/%/j/' 'n/*/`ps -u $user | awk '"'"'{print $1}'"'"'`/'
complete which 		'p/1/c/'
complete where 		'p/1/c/'
complete man 		'p/1/c/'
complete gg			'p/1/d/'
		  
if ( -X tmux ) then
	# create completion for tmux
	set tmux_cmds = `tmux list-commands | awk '{print$1}'`
	uncomplete tmux
	complete   tmux     "p/1/(${tmux_cmds})/"
endif

#
#	tcsh's terminal fixes and keys
#
bindkey 'q'	quoted-insert
bindkey ''	redisplay

bindkey '1'	expand-history
bindkey '4'	expand-variables
bindkey '8'	expand-glob

bindkey '9'	copy-prev-word
bindkey '0'	insert-last-word

bindkey 'd'	kill-whole-line
bindkey 'k'	kill-line
bindkey ''	backward-kill-line

bindkey 'm'	set-mark-command
bindkey 'j'	exchange-point-and-mark
bindkey 'c'	copy-region-as-kill
bindkey 'v'	yank

# shift+f5; alt+p (tcsh's default)
bindkey '[15;2~' history-search-backward
bindkey 'p' history-search-backward
# f5; alt+n (tcsh's default)
bindkey '[15~' history-search-forward
bindkey 'n' history-search-forward

# keypad
bindkey "\033Om" kill-region
bindkey "\033Ok" copy-region-as-kill
bindkey "\033Op" yank

if ( $TERM == "rxvt" || $TERM == "rxvt-unicode" || $TERM == "rxvt-unicode-256color" ) then
	bindkey "\033[8~" end-of-line
	bindkey "[2~" overwrite-mode
	bindkey "[3~" delete-char
else if ( $TERM == "screen" || $TERM == "screen-256color" ) then
	bindkey "[2~" overwrite-mode
	bindkey "[3~" delete-char
else if ( $TERM == "st" || $TERM == "st-256color" ) then
	bindkey "\033[P" delete-char
else if ( $TERM == "linux" ) then
	bindkey '[1~' beginning-of-line
	bindkey '[4~' end-of-line
else
	bindkey "\033[3~" delete-char
endif

# SSH
if ( $?REMOTEHOST ) then
	bindkey "\033OH" beginning-of-line
	bindkey "\033OF" end-of-line
	bindkey "\033[3~" delete-char
endif

#
#	Default Applications
#

### EDITORS ###

# settings for JED
setenv JED_HOME		"${HOME}/.jed"
alias jed-prep     'xjed -batch -n -l preparse'

# settings for GRIEF
setenv GRLIB			"/usr/local/share/grief"
setenv GRPATH			"${HOME}/.grief:${GRLIB}/macros"
setenv GRFLAGS			"--utf8=yes -m grief-rc"
setenv GRTERM			"linux"
setenv GRHELP			"${GRLIB}/help"
setenv GRDICTIONARIES	"en,el"
setenv GRDICTIONARY		"/usr/share/aspell"

# select default editor
set list = ( jed nano joe vim vi emacs ed )
foreach e ( $list )
	if ( -X $e ) then
		setenv EDITOR $e
		break
	endif
end
setenv VISUAL "$EDITOR"
alias edit "$EDITOR"

# select default hex editor
set list = ( hte ht dhex mcedit )
setenv HEXEDITOR "/usr/bin/od -t x1 "
foreach e ( $list )
	if ( -X $e ) then
		setenv HEXEDITOR $e
		break
	endif
end
alias hexedit "$HEXEDITOR"

# default hex dumper
if ( ! -X hex ) then
	if ( -X hexdump ) then
		alias hex 'hexdump -C'
	else
		alias hex 'od -t x1'
	endif
endif

# select BRIEF editor
alias b "$EDITOR"
set list = ( jed gr nano )
foreach e ( $list )
	if ( -X $e ) then
		alias b "$e"
		break
	endif
end

### PAGER ###

setenv LS_OPTIONS		'--color=auto'
setenv LESS 			'-R'
setenv GROFF_ENCODING	'utf8'
setenv LESS_TERMCAP_mb 	'[1;31m'		# begin bold,			ANSI: [1m
setenv LESS_TERMCAP_md  '[1;36m'		# begin blink,			ANSI: [5m
setenv LESS_TERMCAP_me  '[0m'     	# reset bold/blink,		ANSI: [22m[25m
setenv LESS_TERMCAP_so  '[7m'			# begin reverse video,	ANSI: [7m
setenv LESS_TERMCAP_se  '[27m'		# reset reverse video,	ANSI: [27m
setenv LESS_TERMCAP_us  '[4m[1;32m'	# begin underline,		ANSI: [4m
setenv LESS_TERMCAP_ue  '[0m'			# reset underline,		ANSI: [24m
setenv LESS_TERMCAP_mr	'[7m'
setenv LESS_TERMCAP_mh	'[2m'
#	setenv MOST_SWITCHES '-w'
#	setenv MOST_EDITOR   'jed %s -g %d'
#	setenv PAGER         'most'
setenv PAGER "less"
setenv MANPAGER "$PAGER"
if ( -X bat ) then
	setenv BAT_PAGER 'less'
	setenv PAGER 'bat --paging=always --tabs=4'
	# list code
	alias list 'bat --paging=always --tabs=4'
else
	# list code: just use something with syntax highlight
	if ( -X source-highlight-esc.sh ) then
		alias list 'source-highlight-esc.sh -n \!* | less'
	else
		alias list 'less'
	endif
endif

# select default terminal
set list = ( st urxvtcd urxvt xfce-terminal xterm )
foreach e ( $list )
	if ( -X $e ) then
		setenv TERMINAL "$e"
		break
	endif
end

# select graphics browser
set list = ( firefox falkon yandex-browser surf midori dillo chromium chrome )
foreach e ( $list )
	if ( -X $e ) then
		setenv BROWSER "$e"
		break
	endif
end

# select textmode browser
set list = ( links links2 w3m elinks lynx )
foreach e ( $list )
	if ( -X $e ) then
		setenv TEXTBROWSER "$e"
		break
	endif
end

# use make in so many threads as your processors
if ( -e /proc/cpuinfo ) then
	set cpus=`cat /proc/cpuinfo | grep processor | tail -1 | sed 's/processor.*://g'`
	@ cpus ++
	setenv MAKEFLAGS "-j$cpus"
endif

# HOW-TO: shut up KDE's debug messages; 
#	I didn't found it yet, but, you can disable it at `kdebugdialog' app.

#
#	Aliases
#
alias reload		'source ~/.tcshrc'
alias remake		'make clean; make' # warning: 'remake' began gnu project to debug makefiles
alias cls			'clear'
alias psa			'ps aux | grep -v "\["'
alias psu			'ps S -o pid,pri,pcpu,pmem,rss:6,user,group,cmd'
alias diogenis		'fortune diogenis'
alias free-h		'free -h'
alias df-h			'df -h'
alias dff			'echo "Filesystem      Size  Used Avail Use% Mounted on";df -h | grep \'^/dev/\''
alias xcp			'rsync -ah --progress'
alias xmerge		'xrdb -merge ~/.Xresources'
alias xmonitor-off	'xset dpms force off'
alias warn			'echo "\e[7m\e[5m "\!*" \e[0m"'
alias ltrim			"sed 's/^[ \t\n\r]*//'"
alias rtrim			"sed 's/[ \t\n\r]*$DOLR//'"
alias trim			"sed 's/^[ \t\n\r]*//;s/[ \t\r\n]*$DOLR//'"
alias mounted       'mount | grep -E \'^(tmpfs|/dev)\' | grep -Ev \'AppImage|/dev/shm|/dev/fuse\''
alias mc			'mc --nomouse'
alias fs			'du -sbh' # file or directory size

# you can get 'dof' at https://github.com/nereusx/unix-utils
if ( -X dof ) then
	alias fortune-files	'dof -e /usr/share/fortunes/*.dat do echo %b | columns'
	alias test-colors	'dof -e -s:0..15 do \'tput setaf %f; echo colour%f; tput op;\''
else
	alias fortune-files	'ls -1 --color=never /usr/share/fortunes/*.dat | columns'
endif

# colorize
set color
set colorcat
#
alias ll	       'ls    --color -lha'
alias ls	       'ls    --color'
if ( $DISTRO !~ "*BSD" ) then
	alias grep	       'grep  --color=auto'
	alias egrep	       'egrep --color=auto'
	alias dmesg	       'dmesg --color=always'
endif
alias diff	       'diff  --color=auto'

# sudo
if ( $USER != 'root' ) then
	set list = ( htop iotop fdisk cfdsik gparted reboot halt poweroff pmsleep slackpkg apt dpkg apt-get )
	foreach e ( $list )
		if ( -X $e ) then
			alias $e "sudo $e"
		endif
	end
endif
alias tmux-reload 'tmux source-file ~/.tmux.conf'

if ( $DISTRO == "void" ) alias man 'set _=`tput cols`; @ _ = $_ - 2; /usr/bin/man -O width=$_ '

# some nice beeps
[ -f ~/.sounds/beep.wav  ] && alias beep  "play -q -v 0.25 ${HOME}/.sounds/beep.wav"  || alias beep  'echo "\a"'
[ -f ~/.sounds/alarm.wav ] && alias abeep "play -q -v 1.00 ${HOME}/.sounds/alarm.wav" || alias abeep 'echo "\a"'

# xwindows title
alias set-xtitle "echo -n '''\033]0;\!*\007'''"
alias set-tmpane-title '\033]2;\!*\033\\'
# alias precmd 'echo -n "\033]0;${HOST}:$cwd\007"'

# find the correct log file
set list = ( /var/log/everything/current /var/log/socklog/messages/current /var/log/messages /var/log/syslog /var/log/dmesg.log )
foreach e ( $list )
	if ( -r $e ) then
		setenv SYSLOGFILE "$e"
		break
	endif
end
if ( $?SYSLOGFILE ) then
	alias log30 "tail -n `usable-lines` $SYSLOGFILE"
	if ( -X clog ) alias log30 "tail -n `usable-lines` $SYSLOGFILE | clog"
	if ( -X ccze ) alias log30 "tail -n `usable-lines` $SYSLOGFILE | ccze -A"
else
	alias log 30 "echo 'non root users are not allowed'"
endif

set list = ( /var/log/apache2/error.log /var/log/httpd/error.log /var/log/apache/error.log )
foreach e ( $list )
	if ( -r $e ) then
		alias phplog "tail -n `usable-lines` $e"
		break
	endif
end

# net
alias idev			"route -n | awk '/^0.0.0.0/{print $8}'"
if ( ! -X isonline ) then
	alias isonline	'ping 1.1.1.1 -c 1 -w 1 > /dev/null && echo yes || echo no'
endif
alias whereami		'echo "`hostname -f` (`hostname -i`):`pwd`"'
alias ips			"ifconfig | awk '/inet addr:.*/ { split(\$2,a,\":\"); print a[2]; }'"
alias myip			'wget -qO- http://ipecho.net/plain ; echo ;'
alias sniff			"sudo ngrep -d 'eth0' -t '^(GET|POST) ' 'tcp and port 80'"
alias netlog        'sudo netstat -lptu4'

alias check-journal 'sudo iotop -obtqqq | grep jbd2'
alias topmemproc   '( @ lines = `echotc lines` - 2; ps aux | head -1; ps aux | tail -n+2 | sort -nrk4 | head -$lines | cut -c-`echotc cols` )'

alias cdwrite 'xorrecord -v speed=16 dev=/dev/sr0 -eject blank=as_needed'
if ( ! -X calc ) then
	if ( -X wcalc ) then
		alias calc 'wcalc'
	else
		alias calc 'echo "\!*" | bc -l'
	endif
endif

# GIT
if ( -X git ) then
	alias git-q 	'set msg=''\!*''; if ( "$msg" == "" ) set msg="quick and dirty fix"; git add .; git commit -m "$msg"; git push'
	alias git-co 	'git checkout'
endif

## paps support UTF8, a2ps don't
#if ( -X paps ) alias a2ps 'paps'

## zssh is ssh with ZModem support
#if ( -X zssh ) alias ssh  'zssh'

# command line web search
if ( -X surfraw ) then
	setenv SURFRAW_graphical_browser	"$BROWSER"
	setenv SURFRAW_text_browser			"$TEXTBROWSER"
	setenv SURFRAW_graphical			no
	alias ddg 'surfraw duckduckgo'
else if ( ! -X ddg ) then
	alias ddg 'w3m https\://duckduckgo.com/lite'
endif

if ( -X youtube-dl ) then
	alias yt-get-audio	'youtube-dl -i -c --extract-audio --audio-format vorbis ''\!*'''
	alias yt-get-plist	'youtube-dl -i -c --extract-audio --audio-format vorbis -o "%(title)s.%(ext)s" ''\!*'''
endif

#
#	login shell, display welcome screen
#
if ( $?loginsh ) then
	if ( $tty =~ "tty[123456]" ) then
		# set terminal blank mode in minutes
		setterm --blank=5
		# set terminal poweroff in minutes
		setterm --powerdown=5
		setterm --powersave powerdown
		# enable keypad
		echo -n '\033='
	endif

	echo "Welcome to tenex c-shell"
	echo
	set list = ( fortune neofetch screenfetch diogenis fortunes )
	foreach e ( $list )
		if ( -X $e ) then
			$e
			break
		endif
	end
endif

# common packager for root
if ( -x /usr/src/dotfiles/dist/$DISTRO/$DISTRO ) then
	alias app "sudo /usr/src/dotfiles/dist/$DISTRO/$DISTRO"
else if ( -x /usr/src/dotfiles/dist/$DISTRO/app ) then
	alias app "sudo /usr/src/dotfiles/dist/$DISTRO/app"
endif

#
#	load additional settings if you use my script
#
set nonomatch
set list = ( ~/.tcshrc-* )
foreach conf ( $list )
	if ( -r $conf ) source $conf
end
unset nonomatch

# EOF
