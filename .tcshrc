# -*- tab-width: 4; indent-tabs-mode: t; indent-style: tab; encoding: utf-8; -*-
#
#	~/.tcshrc
#	Nicholas Christopoulos (nereus@freemail.gr)

# options
#set use_powerline	# enable `powerline' status line

# (non-)interactive absolute values
set parseoctal
set echo_style=both
set backslash_quote

# mode   umask
# 0777 - 0000 -
# 0775 - 0002 -
# 0770 - 0007
# 0755 - 0022 - default
# 0750 - 0027 - logical
# 0700 - 0077 - nice
# 0000 - 0777 - paranoid
#unset ignoreeof
#umask 027
umask 022

##limit stacksize 256k
## slackpkg (bash script) needs > 256k !!!
## sbpkg (bash script) needs even more...
#limit stacksize 4096k
limit coredumpsize 0
alias termbin 'nc termbin.com 9999'

if ( $?prompt == 0 ) then # we are shell script
	exit
endif

### this is an interactive shell ###
set DS = \$
if ( ! $?HOSTNAME ) then
	setenv HOSTNAME `hostname`
endif

# find distro
if ( -X apt-get ) then
	if ( "`uname -a | grep -i ubuntu`" != "" ) then
		set distro = ubuntu
	else
		set distro = debian
	endif
	set dstype = debian
else
	set dstype = unix
	if ( -X slackpkg ) then
		set distro = slackware
	else if ( -X pkg ) then
		set distro = bsd
	else
		set distro = unix
	endif
endif

# dirty hack for ssh on slack
set x = `ps aux | grep "sshd\: $USER" | wc -l`
if ( $x >= 2 ) then
	echo "ssh connection detected"
	setenv TCSH_SSH_SESSION 1
	setenv TERM screen
endif

# setup several local directories
setenv backup $home/.backup
set list = ( $backup $backup/text $backup/saves $home/.bin $home/.help $home/.misc )
foreach e ( $list )
	if ( ! -e $e ) mkdir -m=0700 -p $e
end

# setup and cleanup PATH
set path = ( $home/.bin $home/.help $path )
if ( -e '/bin/path++' ) setenv PATH `/bin/path++`

# login shell?
if ( $?loginsh ) then # we are login shell..
	if ( $tty =~ "tty[123456]" ) then
		# enable keypad
		echo -n '\033='
	endif
endif
# --- end ---

### setup tcsh's environment ###
set autolist
set highlight
set mail = ( /var/mail/$user )
unset noglob
#alias beepcmd 'play -q ~/.sounds/shell-beep.mp3'
unalias beepcmd
set padhour
#alias helpcommand '\!:1 --help'
alias helpcommand 'man \!:1'
# Runs every tperiod minutes.
# This provides a convenient means for checking on common but infrequent changes such as new mail.
# For example, if one does
#set tperiod = 30
#alias periodic checknews

### EDITORS ###

# settings for JED
setenv JED_HOME		${HOME}/.jed
alias jed-prep     'xjed -batch -n -l preparse'

# settings for GRIEF
setenv GRPATH			${HOME}/.grief-local/:/usr/share/grief/macros:/usr/local/share/grief/macros
setenv GRFLAGS			"-m grief-rc"
setenv GRUTF8_FORCE
setenv GRDICTIONARIES	en,el
setenv GRDICTIONARY		/usr/share/aspell

# select default editor
set list = ( jed gr nano joe vim vi emacs ed )
foreach e ( $list )
	if ( -X $e ) then
		setenv EDITOR $e
		break
	endif
end
setenv VISUAL "$EDITOR"
alias edit "$EDITOR"

# select default hex editor
set list = ( hte dhex )
setenv HEXEDITOR "/usr/bin/od -t x1 "
foreach e ( $list )
	if ( -X $e ) then
		setenv HEXEDITOR $e
		break
	endif
end
alias hexedit "$HEXEDITOR"
if ( -X hexdump ) then
	alias hexdump 'hexdump -C'
else
	alias hexdump 'od -t x1'
endif

# select BRIEF editor
alias b "$EDITOR"
set list = ( jed gr emacs nano )
foreach e ( $list )
	if ( -X $e ) then
		alias b "$e"
		break
	endif
end

### PAGER ###
setenv LS_OPTIONS		'--color=auto'
setenv LESS 			'-R'
setenv GROFF_ENCODING	'utf8'
setenv LESS_TERMCAP_mb 	'[1;31m'		# begin bold,			ANSI: [1m
setenv LESS_TERMCAP_md  '[1;36m'		# begin blink,			ANSI: [5m
setenv LESS_TERMCAP_me  '[0m'     	# reset bold/blink,		ANSI: [21m[25m
setenv LESS_TERMCAP_so  '[7m'			# begin reverse video,	ANSI: [7m
setenv LESS_TERMCAP_se  '[27m'		# reset reverse video,	ANSI: [27m
setenv LESS_TERMCAP_us  '[1;32m'		# begin underline,		ANSI: [4m
setenv LESS_TERMCAP_ue  '[0m'			# reset underline,		ANSI: [24m
setenv LESS_TERMCAP_mr	`tput rev`
setenv LESS_TERMCAP_mh	`tput dim`
setenv LESS_TERMCAP_ZN	`tput ssubm`
setenv LESS_TERMCAP_ZV	`tput rsubm`
setenv LESS_TERMCAP_ZO	`tput ssupm`
setenv LESS_TERMCAP_ZW	`tput rsupm`
#setenv LESSOPEN "|/usr/bin/source-highlight-esc.sh %s"
setenv MOST_SWITCHES	'-w'
setenv MOST_EDITOR		'jed %s -g %d'
setenv PAGER less
#setenv PAGER most

### other settings

# select graphics browser
set list = ( firefox falkon yandex-browser surf midori dillo chromium chrome )
foreach e ( $list )
	if ( -X $e ) then
		setenv BROWSER "$e"
		break
	endif
end

# select textmode browser
set list = ( links links2 w3m elinks lynx )
foreach e ( $list )
	if ( -X $e ) then
		setenv TEXTBROWSER "$e"
		break
	endif
end

# use make in so many threads as your processors
set cpus=`cat /proc/cpuinfo | grep processor | tail -1 | sed 's/processor.*://g'`
@ cpus ++
setenv MAKEFLAGS "-j$cpus"

# HOW-TO: shut up KDE's debug messages; 
#	I didn't found it yet, but, you can disable it at `kdebugdialog' app.

### TERMINAL FIXES and KEYBINDs
if ( $?COLORTERM ) then
	if ( $COLORTERM == "truecolor" ) then
		setenv COLORTERM color
	endif
endif
if ( $TERM == "xterm" ) then
	bindkey "\033[1;3D" backward-word
	bindkey "\033[1;3C" forward-word
else
	bindkey "\033\033[D" backward-word
	bindkey "\033\033[C" forward-word
endif
#bindkey "" list-glob
bindkey '' list-choices-raw
#bindkey "" complete-word-fwd
bindkey '[Z' complete-word-back
bindkey 's' i-search-fwd
bindkey '' i-search-back
bindkey 'q' quoted-insert
bindkey '' redisplay
bindkey 'm' set-mark-command
bindkey 'j' exchange-point-and-mark
bindkey 'k' kill-line
bindkey '' backward-kill-line
bindkey 'd' kill-whole-line
#bindkey '' copy-region-as-kill
bindkey '' kill-region
bindkey '' yank
bindkey '' copy-prev-word
bindkey '-' insert-last-word

# shift+f5; alt+p (tcsh's default)
bindkey '[15;2~' history-search-backward
bindkey 'p' history-search-backward
# f5; alt+n (tcsh's default)
bindkey '[15~' history-search-forward
bindkey 'n' history-search-forward

# pad--
bindkey 'Om' kill-region
# pad-+
bindkey 'Ok' copy-region-as-kill
# pad ins
bindkey 'Op' yank

if ( $TERM == "rxvt" ) then
	setenv TERM rxvt-unicode
	bindkey "^[[8~" end-of-line
else if ( $TERM == "rxvt-unicode" || $TERM == "rxvt-unicode-256color" ) then
	bindkey "^[[8~" end-of-line
else if ( $TERM == "st-256color" ) then
	bindkey "\033[P" delete-char
endif

if ( $?TCSH_SSH_SESSION ) then
	bindkey "OH" beginning-of-line
	bindkey "OF" end-of-line
	bindkey "[3~" delete-char
endif

### prompt
unset ampm
set ellipsis
set prompt = "%B%{\033[35m%}%T %{\033[32m%}%n@%m%b %C4 %# "

###	history
set histlit
set history=128
#set histdup=all
set histdup
set nohistclop
alias hist 'history 20'

###	completion
#	complete [command [word/pattern/list[:select]/[[suffix]/] ...]] (+)
if ( -e /etc/complete.tcsh ) then
	source /etc/complete.tcsh
endif
uncomplete ln
uncomplete rm
uncomplete cp
uncomplete mv
uncomplete mount
complete set		'p/1/s/'
complete unset		'p/1/s/'
complete setenv		'p/1/e/'
complete unsetenv	'p/1/e/'
complete env		'c/*=/f/' 'p/1/e/=/' 'p/2/c/'
complete xdvi		'n/*/f:*.dvi/'
complete latex		'n/*/f:*.{tex,ltx}/'
complete pdflatex	'n/*/f:*.{tex,ltx}/'
complete xelatex	'n/*/f:*.{tex,ltx}/'
complete adb		'n/push/f:*.{apk}/'
complete kill		'c/-/S/' 'c/%/j/' 'n/*/`ps -u $user | awk '"'"'{print $1}'"'"'`/'
if ( -X tmux ) then
	# create completion for tmux
	set tmux_cmds = `tmux list-commands | awk '{print$1}'`
	uncomplete tmux
	complete   tmux     "p/1/(${tmux_cmds})/"
endif

# --- end ---

###	aliases
#alias remake 'make clean; make' # 'remake' began gnu project to debug makefiles
alias cls          'clear'
alias diogenis     'fortune diogenis'
alias free-h       'free -h'
alias df-h         'df -h'
alias xcopy        'rsync -ah --progress'
alias xmerge       'xrdb -merge ~/.Xresources'
alias xmonitor-off 'xset dpms force off'
alias warn         'echo "\e[7m\e[5m "\!*" \e[0m"'
alias ltrim		   "sed 's/^[ \t\n\r]*//'"
alias rtrim		   "sed 's/[ \t\n\r]*$DS//'"
alias trim		   "sed 's/^[ \t\n\r]*//;s/[ \t\r\n]*$DS//'"
# colorize
set color
set colorcat
alias ls	       'ls    --color'
alias ll	       'ls    --color -lha'
alias grep	       'grep  --color=auto'
alias egrep	       'egrep --color=auto'
alias dmesg	       'dmesg --color=always'
alias diff	       'diff  --color=auto'

if ( $USER != 'root' ) then
	# sudo
	alias htop     'sudo htop'
	alias fdisk    'sudo fdisk'
	alias gdisk    'sudo gdisk'
	alias cfdisk   'sudo cfdisk'
	alias cgdisk   'sudo cgdisk'
	alias parted   'sudo parted'
	if ( -X dpkg )    alias dpkg    'sudo dpkg'
	if ( -X apt )     alias apt     'sudo apt'
	if ( -X apt-get ) alias apt-get 'sudo apt-get'
endif

### information utilities
if ( $dstype == "unix" ) then
	alias log30    'sudo tail -n 30 /var/log/messages'
else
	alias log30    'sudo tail -n 30 /var/log/syslog'
endif
alias check-journal 'sudo iotop -obtqqq | grep jbd2'
alias netlog       'sudo netstat -lptu4'
alias phplog		'sudo tail /var/log/apache2/error.log'
alias topmemproc   '( @ lines = `echotc lines` - 2; ps aux | head -1; ps aux | tail -n+2 | sort -nrk4 | head -$lines | cut -c-`echotc cols` )'
alias whereami	   'echo "`hostname -f` (`hostname -i`):`pwd`"'
# use system time command (time of process execution statistics) instead of tcsh time
alias time '/usr/bin/time'

### generic programs
alias cdwrite	   'xorrecord -v speed=16 dev=/dev/sr0 -eject blank=as_needed'
if ( ! -X calc ) then
	if ( -X wcalc ) then
		alias calc 'wcalc'
	else if ( -X bc ) then
		alias calc 'echo \!* | bc -l'
	endif
endif
if ( -r /var/lib/dpkg/status ) then
	alias dpkg-dc 'grep -E \'(Package:|Depends:).*debconf\' /var/lib/dpkg/status'
endif
alias git-q 'git add .; git commit -m "quick and dirty fix"; git push'
alias git-s 'git add .; git commit -m ''\!*''; git push'
## paps support UTF8, a2ps don't
#if ( -X paps ) alias a2ps 'paps'
## zssh is ssh with ZModem support
#if ( -X zssh ) alias ssh  'zssh'
## mutt or neomutt ?
#if ( -X neomutt && ( ! -X mutt ) ) alias mutt 'neomutt'
# command line web search
if ( -X surfraw ) then
	setenv SURFRAW_graphical_browser	"$BROWSER"
	setenv SURFRAW_text_browser			"$TEXTBROWSER"
	setenv SURFRAW_graphical			no
	alias ddg 'surfraw duckduckgo'
else
	alias ddg 'w3m https://duckduckgo.com/lite'
endif

### directory stuff
set dunique
set cdpath = ( ${HOME} /usr/src )
set pushdsilent
alias pd 'pushd'
alias pd. 'pushd $PWD'
if ( -e /usr/bin/devtodo ) then
	alias cwdcmd devtodo --timeout --summary
endif
# use always pushd instead of cd
set pushdtohome
alias cd 'pushd'
alias dirs 'dirs -v'

# 
if ( $?use_powerline ) then
	if ( -f `which powerline-daemon` ) then
		powerline-daemon -q
		setenv POWERLINE_TCSH_CONTINUATION 1
		setenv POWERLINE_TCSH_SELECT 1
		source /usr/share/powerline/bindings/tcsh/powerline.tcsh
	endif
endif
# --- end ---

### load additional settings if you use my script

set nonomatch
if ( -d ~/.tcsh ) then
	set list = ( ~/.tcsh/* )
	foreach conf ( $list )
		if ( -r $conf ) source $conf
	end
endif
set list = ( ~/.tcshrc-* )
foreach conf ( $list )
	if ( -r $conf ) source $conf
end
unset nonomatch

#EOF
