.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Alien::Package 3"
.TH Alien::Package 3 "2019-10-02" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Alien::Package \- an object that represents a package
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a perl object class that represents a package in an internal format
usable by alien. The package may be a deb, a rpm, a tgz, or a slp package,
etc. Objects in this class hold various fields of metadata from the actual
packages they represent, as well as some fields pointing to the actual
contents of the package. They can also examine an actual package on disk,
and populate those fields. And they can build the actual package using the
data stored in the fields.
.PP
A typical use of this object class will be to instantiate an object from
a class derived from this one, such as Alien::Package::Rpm. Feed the object
a rpm file, thus populating all of its fields. Then rebless the object into
the destination class, such as Alien::Package::Deb. Finally, ask the object
to build a package, and the package has been converted.
.SH "FIELDS"
.IX Header "FIELDS"
These fields are of course really just methods that all act similarly;
allowing a value to be passed in to set them, or simply returning the value
of the field if nothing is passed in. Child classes may override these
fields to process input data, or to format output data. The general rule is
that input data is modified to get things into a package-independant form,
which is how the data is stored in the fields. When the value of a field is
read, it too may be modified before it is returned, to change things into a
form more suitable for the particular type of package.
.IP "name" 4
.IX Item "name"
The package's name.
.IP "version" 4
.IX Item "version"
The package's upstream version.
.IP "release" 4
.IX Item "release"
The package's distribution specific release number.
.IP "arch" 4
.IX Item "arch"
The package's architecture, in the format used by Debian.
.IP "maintainer" 4
.IX Item "maintainer"
The package's maintainer.
.IP "depends" 4
.IX Item "depends"
The package's dependencies. Only dependencies that should exist on all
target distributions can be put in here though (ie: lsb).
.IP "group" 4
.IX Item "group"
The section the package is in.
.IP "summary" 4
.IX Item "summary"
A one line description of the package.
.IP "description" 4
.IX Item "description"
A longer description of the package. May contain multiple paragraphs.
.IP "copyright" 4
.IX Item "copyright"
A short statement of copyright.
.IP "origformat" 4
.IX Item "origformat"
What format the package was originally in.
.IP "distribution" 4
.IX Item "distribution"
What distribution family the package originated from.
.IP "binary_info" 4
.IX Item "binary_info"
Whatever the package's package tool says when told to display info about
the package.
.IP "conffiles" 4
.IX Item "conffiles"
A reference to a list of all the conffiles in the package.
.IP "files" 4
.IX Item "files"
A reference to a list of all the files in the package.
.IP "changelogtext" 4
.IX Item "changelogtext"
The text of the changelog
.IP "postinst" 4
.IX Item "postinst"
The postinst script of the package.
.IP "postrm" 4
.IX Item "postrm"
The postrm script of the package.
.IP "preinst" 4
.IX Item "preinst"
The preinst script of the package.
.IP "prerm" 4
.IX Item "prerm"
The prerm script of the package.
.IP "usescripts" 4
.IX Item "usescripts"
Only use the above scripts fields when generating the package if this is set
to a true value.
.IP "unpacked_tree" 4
.IX Item "unpacked_tree"
Points to a directory where the package has been unpacked.
.IP "owninfo" 4
.IX Item "owninfo"
If set this will be a reference to a hash, with filename as key, that holds
ownership/group information for files that cannot be represented on the
filesystem. Typically that is because the owners or groups just don't exist
yet. It will be set at unpack time.
.IP "modeinfo" 4
.IX Item "modeinfo"
If set this will be a reference to a hash, with filename as key, that
holds mode information for setuid files that have an entry in owninfo.
It will be set at unpack time.
.SH "METHODS"
.IX Header "METHODS"
.IP "init" 4
.IX Item "init"
This is called by \fBnew()\fR. It's a handy place to set fields, etc, without
having to write your own \fBnew()\fR method.
.IP "install" 4
.IX Item "install"
Simply installs a package file. The filename is passed.
This has to be overridden in child classes.
.IP "test" 4
.IX Item "test"
Test a package file. The filename is passed, should return an array of lines
of test results. Child classses may implement this.
.IP "filename" 4
.IX Item "filename"
Set/get the filename of the package the object represents.
.Sp
When it is set, it performs a scan of the file, populating most other
fields with data from it.
.Sp
(This is just a stub; child classes should override it to actually do
something.)
.IP "scripts" 4
.IX Item "scripts"
Returns a list of all non-empty maintainer scripts in the package.
.IP "scan" 4
.IX Item "scan"
This method scans the file associated with an object, and populates as many
other fields as it can with data from it.
.IP "unpack" 4
.IX Item "unpack"
This method unpacks the package into a temporary directory. It sets
unpacked_tree to point to that directory.
.Sp
(This is just a stub method that makes a directory below the current
working directory, and sets unpacked_tree to point to it. It should be
overridden by child classes to actually unpack the package as well.)
.IP "prep" 4
.IX Item "prep"
This method causes the object to prepare a build tree to be used in
building the object. It expects that the unpack method has already been
called. It takes the tree generated by that method, and mangles it somehow,
to produce a suitable build tree.
.Sp
(This is just a stub method that all child classes should override.)
.IP "cleantree" 4
.IX Item "cleantree"
This method should clean the unpacked_tree of any effects the prep and
build methods might have on it.
.IP "revert" 4
.IX Item "revert"
This method should ensure that the object is in the same state it was in
before the prep method was called.
.IP "build" 4
.IX Item "build"
This method takes a prepped build tree, and simply builds a package from
it. It should put the package in the current directory, and should return
the filename of the generated package.
.Sp
(This is just a stub method that all child classes should override.)
.IP "incrementrelease" 4
.IX Item "incrementrelease"
This method should increment the release field of the package by
the specified number.
.IP "\s-1DESTROY\s0" 4
.IX Item "DESTROY"
When an object is destroyed, it cleans some stuff up. In particular, if the
package was unpacked, it is time now to wipe out the temporary directory.
.IP "\s-1AUTOLOAD\s0" 4
.IX Item "AUTOLOAD"
Handles all fields, by creating accessor methods for them the first time
they are accessed.
.SH "CLASS DATA"
.IX Header "CLASS DATA"
.ie n .IP "$Alien::Package::verbose" 4
.el .IP "\f(CW$Alien::Package::verbose\fR" 4
.IX Item "$Alien::Package::verbose"
If set to a nonzero value, the shell commands that are run should be output.
If set to a value greater than 1, any output of the commands should also be
output.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
These methods can be called on either an object or on the class itself.
.IP "new" 4
.IX Item "new"
Returns a new object of this class. Optionally, you can pass in named
parameters that specify the values of any fields in the class.
.IP "checkfile" 4
.IX Item "checkfile"
Pass it a filename, and it will return true if it looks like the file is
a package of the type handled by the class.
.IP "do" 4
.IX Item "do"
Runs a shell command. Is verbose or not depending on the value of 
\&\f(CW$Alien::Package::verbose\fR. Returns true if the command succeeds,
false on failure.
.IP "runpipe" 4
.IX Item "runpipe"
This is similar to backticks, but honors \f(CW$Alien::Package::verbose\fR, logging
the command run if asked to. The output of the command is returned.
.Sp
The first parameter controls what to do on error. If it's true then any
errors from the command will be ignored (and $? will be set). If it's
false, errors will abort alien.
.SH "AUTHOR"
.IX Header "AUTHOR"
Joey Hess <joey@kitenet.net>
