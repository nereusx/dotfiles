.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Alien::Package::Deb 3"
.TH Alien::Package::Deb 3 "2019-10-02" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Alien::Package::Deb \- an object that represents a deb package
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an object class that represents a deb package. It is derived from
Alien::Package.
.SH "FIELDS"
.IX Header "FIELDS"
.IP "have_dpkg_deb" 4
.IX Item "have_dpkg_deb"
Set to a true value if dpkg-deb is available.
.IP "deb_member_list" 4
.IX Item "deb_member_list"
Set to the list of member names in the deb package.
.IP "dirtrans" 4
.IX Item "dirtrans"
After the build stage, set to a hash reference of the directories we moved
files from and to, so these moves can be reverted in the cleantree stage.
.IP "fixperms" 4
.IX Item "fixperms"
If this is set to true, the generated debian/rules will run dh_fixperms.
.SH "METHODS"
.IX Header "METHODS"
.IP "init" 4
.IX Item "init"
Sets have_dpkg_deb if dpkg-deb is in the path. I prefer to use dpkg-deb,
if it is available since it is a lot more future-proof.
.IP "checkfile" 4
.IX Item "checkfile"
Detect deb files by their extension.
.IP "install" 4
.IX Item "install"
Install a deb with dpkg. Pass in the filename of the deb to install.
.IP "test" 4
.IX Item "test"
Test a deb with lintian. Pass in the filename of the deb to test.
.IP "get_deb_member_list" 4
.IX Item "get_deb_member_list"
Helper method. Pass it the name of the deb and it will return the list of
ar members.
.IP "getcontrolfile" 4
.IX Item "getcontrolfile"
Helper method. Pass it the name of a control file, and it will pull it out
of the deb and return it.
.IP "get_datamember_cmd" 4
.IX Item "get_datamember_cmd"
Helper method. Pass it the name of the deb and it will return the raw
command needed to extract the data.tar member.
.IP "scan" 4
.IX Item "scan"
Implement the scan method to read a deb file.
.IP "unpack" 4
.IX Item "unpack"
Implement the unpack method to unpack a deb file.
.IP "getpatch" 4
.IX Item "getpatch"
This method tries to find a patch file to use in the prep stage. If it
finds one, it returns it. Pass in a list of directories to search for
patches in.
.IP "prep" 4
.IX Item "prep"
Adds a populated debian directory the unpacked package tree, making it
ready for building. This can either be done automatically, or via a patch
file.
.IP "build" 4
.IX Item "build"
Build a deb.
.IP "cleantree" 4
.IX Item "cleantree"
Delete the entire debian/ directory.
.IP "package" 4
.IX Item "package"
Set/get package name.
.Sp
Always returns the package name in lowercase with all invalid characters
rmoved. The name is however, stored unchanged.
.IP "version" 4
.IX Item "version"
Set/get package version.
.Sp
When the version is set, it will be stripped of any epoch. If there is a
release, the release will be stripped away and used to set the release
field as a side effect. Otherwise, the release will be set to 1.
.Sp
More sanitization of the version is done when the field is retrieved, to
make sure it is a valid debian version field.
.IP "release" 4
.IX Item "release"
Set/get package release.
.Sp
Always returns a sanitized release version. The release is however, stored
unchanged.
.IP "description" 4
.IX Item "description"
Set/get description
.Sp
Although the description is stored internally unchanged, this will always
return a sanitized form of it that is compliant with Debian standards.
.IP "date" 4
.IX Item "date"
Returns the date, in rfc822 format.
.IP "email" 4
.IX Item "email"
Returns an email address for the current user.
.IP "username" 4
.IX Item "username"
Returns the user name of the real uid.
.IP "savescript" 4
.IX Item "savescript"
Saves script to debian directory.
.IP "gen_postinst" 4
.IX Item "gen_postinst"
Modifies or creates a postinst. This may include generated shell code to set
owners and groups from the owninfo field, and update modes from the modeinfo
field.
.SH "AUTHOR"
.IX Header "AUTHOR"
Joey Hess <joey@kitenet.net>
